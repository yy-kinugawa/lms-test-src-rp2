<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="jp.co.sss.lms.mapper.MCourseMapper">

	<resultMap type="jp.co.sss.lms.dto.CourseServiceCourseDto" id="courseDetail">
		<id column="course_id" property="courseId" />
		<result column="course_name" property="courseName" />
		<result column="open_time" property="openTime" />
		<result column="close_time" property="closeTime" />
		<collection property="courseServiceCategoryDtoList" ofType="jp.co.sss.lms.dto.CourseServiceCategoryDto">
			<!-- Task.115 -->
			<result column="category_id" property="categoryId" />
			<result column="category_name" property="categoryName" />
			<!-- Task.18 -->
			<result column="category_description" property="categoryDescription" />
			<collection property="courseServiceSectionDtoList" ofType="jp.co.sss.lms.dto.CourseServiceSectionDto">
				<result column="section_id" property="sectionId" />
				<result column="section_name" property="sectionName" />
				<result column="date" property="date" />
		     	<!-- Task.15 -->	
				<result column="report_flg" property="reportFlg" />
	         	<!-- Task.16 -->
				<result column="exam_flg" property="examFlg" />
			</collection>
		</collection>
	</resultMap>
	<select id="getCourseDetail" resultMap="courseDetail">
		SELECT
			t1.course_id,
			t1.course_name,
			t1.open_time,
			t1.close_time,
			<!-- Task.115 -->
			t3.category_id,
			t3.category_name,
			<!-- Task.18 -->
			t3.category_description,
			t2.section_id,
			t2.section_name,
			t2.date,
			<!-- Task.15 -->
			<if test="lmsUserId != null"><!-- Task.42 Task.78 コース一覧からの遷移でエラーとなる対策 -->
			CASE WHEN t5.report_count IS NULL AND t7.report_count IS NULL THEN false ELSE true END AS report_flg,
			</if>
			<!-- Task.16 -->
			CASE WHEN t8.exam_count IS NULL THEN false ELSE true END AS exam_flg
		FROM m_course t1
			<!-- Task.114 -->
			LEFT OUTER JOIN m_section t2 ON t2.course_id = t1.course_id AND t2.delete_flg = #{deleteFlg}
			LEFT OUTER JOIN m_category t3 ON t3.category_id = t2.category_id AND t3.delete_flg = #{deleteFlg}
			LEFT OUTER JOIN t_course_daily_report t4 ON t4.course_id = t1.course_id AND t4.delete_flg = #{deleteFlg}
			<!-- Task.15 -->
			<if test="lmsUserId != null"><!-- Task.42 Task.78 コース一覧からの遷移でエラーとなる対策 -->
			LEFT OUTER JOIN (SELECT daily_report_id, date, count(*) AS report_count FROM t_daily_report_submit 
				WHERE lms_user_id = #{lmsUserId} AND delete_flg = #{deleteFlg} GROUP BY daily_report_submit_id) t5 
				ON t5.daily_report_id = t4.daily_report_id AND t5.date = t2.date
			LEFT OUTER JOIN t_section_daily_report t6 ON t6.section_id = t2.section_id AND t6.delete_flg = #{deleteFlg}
			LEFT OUTER JOIN (SELECT daily_report_id, date, count(*) AS report_count FROM t_daily_report_submit 
				WHERE lms_user_id = #{lmsUserId} AND delete_flg = #{deleteFlg} GROUP BY daily_report_submit_id) t7 
				ON t7.daily_report_id = t6.daily_report_id AND t7.date = t2.date
			</if>
			<!-- Task.16 -->
			LEFT OUTER JOIN (SELECT section_id, count(*) AS exam_count FROM t_exam_section 
				WHERE delete_flg = #{deleteFlg} GROUP BY section_id) t8 ON t8.section_id = t2.section_id
		WHERE t1.course_id = #{courseId} 
			AND t1.delete_flg = #{deleteFlg}
		ORDER BY t2.section_id ASC, t3.category_id
	</select>

	<select id="getCourseCount" resultType="Integer">
		SELECT count(*) 
		FROM m_course 
		WHERE course_id = #{courseId}
			AND delete_flg = 0
	</select>

	<!-- Task.42 -->
	<select id="getCourseWithTeachingMaterialCountDtoList" resultType="jp.co.sss.lms.dto.CourseWithTeachingMaterialCountDto">
		SELECT
			t1.course_id,
			t1.course_name,
			t1.course_description,
			t1.open_time,
			t1.close_time,
			t1.course_type,
			t1.password,
			t2.teaching_material_count
		FROM m_course t1
			LEFT OUTER JOIN (SELECT course_id, COUNT(*) AS teaching_material_count FROM t_course_teaching_material 
				WHERE delete_flg = #{deleteFlg} GROUP BY course_id) t2 ON t2.course_id = t1.course_id
		WHERE t1.account_id = #{accountId} 
			AND t1.delete_flg = #{deleteFlg} 
			AND t1.hidden_flg = #{hiddenFlg}
		ORDER BY t1.course_name
	</select>

	<!-- Task.43 -->
	<select id="getCourseDtoList" resultType="jp.co.sss.lms.dto.CourseDto">
		SELECT
			course_id,
			course_name,
			course_description,
			open_time,
			close_time,
			course_type,
			hidden_flg
		FROM m_course
		WHERE hidden_flg = #{hiddenFlg} 
			AND delete_flg = #{deleteFlg}
	</select>

	<!-- Task.114 -->
	<select id="getCourseReportDtoList" resultType="jp.co.sss.lms.dto.CourseReportDto">
		SELECT
			t1.course_id,
			t1.course_name,
			t1.course_description,
			t1.open_time,
			t1.close_time,
			t2.daily_report_id,
			t3.report_name AS daily_report_name,
			t4.ev_report_id,
			t5.report_name AS ev_report_name,
			t6.meeting_file_id,
			t7.file_name AS meeting_file_name
		FROM m_course t1
			LEFT OUTER JOIN t_course_daily_report t2 ON t2.course_id = t1.course_id AND t2.delete_flg = #{deleteFlg}
			LEFT OUTER JOIN m_daily_report t3 ON t3.daily_report_id = t2.daily_report_id
			LEFT OUTER JOIN t_ev_course t4 ON t4.course_id = t1.course_id AND t4.delete_flg = #{deleteFlg}
			LEFT OUTER JOIN m_ev_report t5 ON t5.ev_report_id = t4.ev_report_id
			LEFT OUTER JOIN t_course_meeting t6 ON t6.course_id = t1.course_id AND t6.delete_flg = #{deleteFlg}
			LEFT OUTER JOIN m_meeting_file t7 ON t7.meeting_file_id = t6.meeting_file_id
		WHERE t1.course_id = #{courseId}
			AND t1.hidden_flg = #{hiddenFlg} 
			AND t1.delete_flg = #{deleteFlg}
		ORDER BY t5.ev_report_id ASC
	</select>

	<!-- Task.114 -->
	<insert id="insert" parameterType="jp.co.sss.lms.entity.MCourse" useGeneratedKeys="true" keyProperty="courseId">
		INSERT INTO m_course (
			course_name,
			course_description,
			open_time,
			close_time,
			course_type,
			account_id,
			delete_flg,
			first_create_user,
			first_create_date,
			last_modified_user,
			last_modified_date,
			password,
			hidden_flg
		) VALUES (
			#{courseName},
			#{courseDescription},
			#{openTime},
			#{closeTime},
			#{courseType},
			#{accountId},
			#{deleteFlg},
			#{firstCreateUser},
			#{firstCreateDate},
			#{lastModifiedUser},
			#{lastModifiedDate},
			#{password},
			#{hiddenFlg}
		)
	</insert>

	<!-- Task.114 -->
	<update id="update" parameterType="jp.co.sss.lms.entity.MCourse">
		UPDATE m_course
		SET
			course_name = #{courseName},
			course_description = #{courseDescription},
			open_time = #{openTime},
			close_time = #{closeTime},
			last_modified_user = #{lastModifiedUser},
			last_modified_date = #{lastModifiedDate}
		WHERE course_id = #{courseId}
	</update>

</mapper>